

html {
  box-sizing: border-box;
}

body {
  font-family: sans-serif;
  color: #0a0a23;
}

h1 {
  max-width: 37.25rem;
  margin: 0 auto;
  padding: 1.5rem 1.25rem;
}

h1 .flex {
  display: flex;
  flex-direction: column-reverse;
  gap: 1rem;
}

h1 .flex span:first-of-type {
  font-size: 0.7em;
}

h1 .flex span:last-of-type {
  font-size: 1.2em;
}

section {
  max-width: 40rem;
  margin: 0 auto;
  border: 2px solid #d0d0d5;
}

/* Adding position sticky moved the element into its own stack. 
To ensure your #years element does not get hidden by different stacks, 
add a z-index property set to 999 in the #years rule. */
#years {
  display: flex;
  justify-content: flex-end;
  position: sticky;
  z-index: 999;
  top: 0;
  background: #0a0a23;
  color: #fff;
  padding: 0.5rem calc(1.25rem + 2px) 0.5rem 0;
  margin: 0 -2px;
}

#years span[class] {
  font-weight: bold;
  width: 4.5rem;
  text-align: right;
}

.table-wrap {
  padding: 0 0.75rem 1.5rem 0.75rem;
}

span[class~="sr-only"] {
  border: 0 !important;
  clip: rect(1px, 1px, 1px, 1px) !important;
  clip-path: inset(50%) !important;
  height: 1px !important;
  width: 1px !important;
  position: absolute !important;
  overflow: hidden !important;
  white-space: nowrap !important;
  padding: 0 !important;
  margin: -1px !important;
}

/* The :not() pseudo-selector is used to target all elements that do not match the selector - 
in this case, any of your span elements that do not have the sr-only class. This ensures 
that your earlier rules for the span[class~="sr-only"] selector are not overwritten. */

/* Now that you have added the !important keyword,
you can remove the :not(.sr-only) from your span selector.

span:not(.sr-only){
  font-weight:normal;
}
*/

/* border-collapse property to collapse, which will allow cell borders to collapse into a single border, 
instead of a border around each cell. */
table {
  border-collapse: collapse;
  border: 0;
  width: 100%;
  position: relative;
  margin-top: 3rem;
}

table caption {
  color: #356eaf;
  font-size: 1.3em;
  font-weight: normal;
  position: absolute;
  top: -2.25rem;
  left: 0.5rem;
}

/* Give them a width to fill the viewport, with a minimum and maximum of 4rem. 
This approach ensures that the width is fixed, whereas setting width specifically 
would allow the elements to shrink to the container. */
tbody td {
  width: 100vw;
  min-width: 4rem;
  max-width: 4rem;
}

/* Width of the entire container, less 12rem. */
tbody th {
  width: calc(100% - 12rem);
}

/* The [attribute="value"] selector targets any element that has an attribute 
with a specific value. Create a tr[class="total"] selector to target specifically 
your tr elements with the total class. */
tr[class="total"] {
  border-bottom: 4px double #0a0a23;
  font-weight: bold;
}

tr[class="total"] th {
  text-align: left;
  padding: 0.5rem 0 0.25rem 0.5rem;
}
/* The key difference between tr[class="total"] and tr.total is that the first will 
select tr elements where the only class is total. The second will select tr elements 
where the class includes total. */
tr.total td {
  text-align: right;
  padding: 0 0.25rem;
}

/* The :nth-of-type() pseudo-selector is used to target specific elements based on their 
order among siblings of the same type. */
tr.total td:nth-of-type(3) {
  padding-right: 0.5rem;
}

tr.total:hover {
  background-color: #99c9ff;
}

td.current {
  font-style: italic;
}

tr.data {
  background-image: linear-gradient(to bottom, #dfdfe2 1.845rem, white 1.845rem);
}

tr.data th {
  text-align: left;
  padding-top: 0.3rem;
  padding-left: 0.5rem;
}

tr.data th .description {
  display: block;
  font-weight: normal;
  font-style: italic;
  padding: 1rem 0 0.75rem;
  margin-right: -13.5rem;
}

tr.data td {
  vertical-align: top;
  padding: 0.3rem 0.25rem 0;
  text-align: right;
}
tr.data td:last-of-type{
  padding-right:0.5rem
}